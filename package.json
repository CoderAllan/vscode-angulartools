{
  "name": "vscode-angulartools",
  "publisher": "coderAllan",
  "displayName": "AngularTools",
  "description": "AngularTools is a collection of tools for exploring an Angular project, help you with documenting, reverse engineering a project or help when refactoring.",
  "icon": "logo.png",
  "version": "1.10.2",
  "license": "MIT",
  "repository": "https://github.com/CoderAllan/vscode-angulartools",
  "author": {
    "name": "Allan Simonsen",
    "url": "https://github.com/CoderAllan"
  },
  "engines": {
    "vscode": "^1.74.0"
  },
  "categories": [
    "Other",
    "Visualization"
  ],
  "keywords": [
    "angular",
    "dgml",
    "typescript",
    "markdown",
    "tools"
  ],
  "activationEvents": [
    "onCommand:angulartools.listAllImports",
    "onCommand:angulartools.projectDirectoryStructure",
    "onCommand:angulartools.modulesToMarkdown",
    "onCommand:angulartools.packageJsonToMarkdown",
    "onCommand:angulartools.showComponentHierarchy",
    "onCommand:angulartools.showModuleHierarchy",
    "onCommand:angulartools.componentHierarchyMarkdown",
    "onCommand:angulartools.generateDependencyInjectionGraph"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "angulartools.listAllImports",
        "title": "AngularTools: List all imports"
      },
      {
        "command": "angulartools.projectDirectoryStructure",
        "title": "AngularTools: Show the project directory structure"
      },
      {
        "command": "angulartools.modulesToMarkdown",
        "title": "AngularTools: Generate a Markdown file of all modules in the current project."
      },
      {
        "command": "angulartools.packageJsonToMarkdown",
        "title": "AngularTools: Generate a Markdown file from package.json files in the workspace."
      },
      {
        "command": "angulartools.showComponentHierarchy",
        "title": "AngularTools: Show a graph representing the component hierarchy."
      },
      {
        "command": "angulartools.showModuleHierarchy",
        "title": "AngularTools: Show a graph representing the module hierarchy."
      },
      {
        "command": "angulartools.componentHierarchyMarkdown",
        "title": "AngularTools: Generate a directed graph in Mermaid Markdown format."
      },
      {
        "command": "angulartools.generateDependencyInjectionGraph",
        "title": "AngularTools: Show a graph representing the components and the injected dependencies."
      }
    ],
    "configuration": {
      "title": "AngularTools",
      "properties": {
        "angularTools.excludeDirectories": {
          "type": "string",
          "default": "bin;obj;node_modules;dist;packages;.git;.vs;.github",
          "description": "Semicolon separated list of directories that should be excluded when scanning for for Angular components."
        },
        "angularTools.dgmlGraph.graphLayout": {
          "type": "string",
          "default": "Sugiyama",
          "enum": [
            "Sugiyama",
            "ForceDirected"
          ],
          "description": "This is the algorithm used to layout the nodes of the graph. Sugiyama wil try to avoid crossing edges as far as possible. ForceDirected will try to cluster the nodes."
        },
        "angularTools.dgmlGraph.graphDirection": {
          "type": "string",
          "default": "LeftToRight",
          "enum": [
            "TopToBottom",
            "BottomToTop",
            "LeftToRight",
            "RightToLeft"
          ],
          "description": "This will make the layout algorithm position the graph nodes in the specified direction."
        },
        "angularTools.dependencyInjectionGraph.pngGraphFilename": {
          "type": "string",
          "default": "DependencyInjectionGraph.png",
          "description": "The default name used when saving the dependency injection hierarchy graph to a Png file."
        },
        "angularTools.dependencyInjectionGraph.dgmlGraphFilename": {
          "type": "string",
          "default": "DependencyInjectionGraph.dgml",
          "description": "The default filename used when saving a dependency injection hierarchy graph to a Directed Graph Markup Language (Dgml) file."
        },
        "angularTools.dependencyInjectionGraph.edgeArrowToType": {
          "type": "string",
          "default": "triangle",
          "enum": [
            "arrow",
            "bar",
            "box",
            "circle",
            "crow",
            "curve",
            "diamond",
            "inv_curve",
            "inv_triangle",
            "triangle",
            "vee"
          ],
          "description": "The default ending of the edges."
        },
        "angularTools.showComponentHierarchy.componentHierarchyPngFilename": {
          "type": "string",
          "default": "ComponentHierarchy.png",
          "description": "The default name used when saving the component hierarchy to a Png file."
        },
        "angularTools.showComponentHierarchy.componentHierarchyDgmlGraphFilename": {
          "type": "string",
          "default": "ComponentHierarchy.dgml",
          "description": "The default name used when saving the component hierarchy to a Dgml file."
        },
        "angularTools.showComponentHierarchy.edgeArrowToType": {
          "type": "string",
          "default": "triangle",
          "enum": [
            "arrow",
            "bar",
            "box",
            "circle",
            "crow",
            "curve",
            "diamond",
            "inv_curve",
            "inv_triangle",
            "triangle",
            "vee"
          ],
          "description": "The default ending of the edges."
        },
        "angularTools.showModuleHierarchy.moduleHierarchyPngFilename": {
          "type": "string",
          "default": "ModuleHierarchy.png",
          "description": "The default name used when saving the module hierarchy to a Png file."
        },
        "angularTools.showModuleHierarchy.moduleHierarchyDgmlGraphFilename": {
          "type": "string",
          "default": "ModuleHierarchy.dgml",
          "description": "The default name used when saving the module hierarchy to a Dgml file."
        },
        "angularTools.showModuleHierarchy.edgeArrowToType": {
          "type": "string",
          "default": "triangle",
          "enum": [
            "arrow",
            "bar",
            "box",
            "circle",
            "crow",
            "curve",
            "diamond",
            "inv_curve",
            "inv_triangle",
            "triangle",
            "vee"
          ],
          "description": "The default ending of the edges."
        },
        "angularTools.graphSelection.graphSelectionGuidelineColor": {
          "type": "string",
          "default": "blue",
          "description": "The color of the guidelines used when selecting part of a component hierarchy graph. The string should be in rgb format or standard css color names."
        },
        "angularTools.graphSelection.graphSelectionGuidelineWidth": {
          "type": "number",
          "default": "1",
          "description": "The width of the guide lines shown when selecting part of a component hierarchy graph"
        },
        "angularTools.graphSelection.graphSelectionColor": {
          "type": "string",
          "default": "red",
          "description": "The color of the selection rectangle used when selecting part of a component hierarchy graph. The string should be in rgb format or standard css color names."
        },
        "angularTools.graphSelection.graphSelectionWidth": {
          "type": "number",
          "default": "2",
          "description": "The width of the selection rectangle shown when selecting part of a component hierarchy graph"
        },
        "angularTools.graphNodes.rootNodeBackgroundColor": {
          "type": "string",
          "default": "#00ff00",
          "description": "The color of the root nodes of the component hierarchy graph. The string should be in rgb format or standard css color names."
        },
        "angularTools.graphNodes.rootNodeNodeShape": {
          "type": "string",
          "default": "box",
          "enum": [
            "ellipse",
            "circle",
            "database",
            "box",
            "text",
            "diamond",
            "dot",
            "star",
            "triangle",
            "triangleDown",
            "hexagon",
            "square"
          ],
          "description": "The default shape of the nodes representing root nodes. Notice that 'ellipse','circle','database','box' and 'text' have the label inside the shape, the rest have the label outside the shape."
        },
        "angularTools.graphNodes.componentNodeBackgroundColor": {
          "type": "string",
          "default": "#0288d1",
          "description": "The default color of the nodes representing components."
        },
        "angularTools.graphNodes.componentNodeShape": {
          "type": "string",
          "default": "box",
          "enum": [
            "ellipse",
            "circle",
            "database",
            "box",
            "text",
            "diamond",
            "dot",
            "star",
            "triangle",
            "triangleDown",
            "hexagon",
            "square"
          ],
          "description": "The default shape of the nodes representing components. Notice that 'ellipse','circle','database','box' and 'text' have the label inside the shape, the rest have the label outside the shape."
        },
        "angularTools.graphNodes.moduleNodeBackgroundColor": {
          "type": "string",
          "default": "#e53935",
          "description": "The default color of the nodes representing modules."
        },
        "angularTools.graphNodes.moduleNodeShape": {
          "type": "string",
          "default": "box",
          "enum": [
            "ellipse",
            "circle",
            "database",
            "box",
            "text",
            "diamond",
            "dot",
            "star",
            "triangle",
            "triangleDown",
            "hexagon",
            "square"
          ],
          "description": "The default shape of the nodes representing modules. Notice that 'ellipse','circle','database','box' and 'text' have the label inside the shape, the rest have the label outside the shape."
        },
        "angularTools.graphNodes.pipeNodeBackgroundColor": {
          "type": "string",
          "default": "#00897b",
          "description": "The default color of the nodes representing pipes."
        },
        "angularTools.graphNodes.pipeNodeShape": {
          "type": "string",
          "default": "box",
          "enum": [
            "ellipse",
            "circle",
            "database",
            "box",
            "text",
            "diamond",
            "dot",
            "star",
            "triangle",
            "triangleDown",
            "hexagon",
            "square"
          ],
          "description": "The default shape of the nodes representing pipes. Notice that 'ellipse','circle','database','box' and 'text' have the label inside the shape, the rest have the label outside the shape."
        },
        "angularTools.graphNodes.directiveNodeBackgroundColor": {
          "type": "string",
          "default": "#ffc107",
          "description": "The default color of the nodes representing directives."
        },
        "angularTools.graphNodes.directiveNodeShape": {
          "type": "string",
          "default": "box",
          "enum": [
            "ellipse",
            "circle",
            "database",
            "box",
            "text",
            "diamond",
            "dot",
            "star",
            "triangle",
            "triangleDown",
            "hexagon",
            "square"
          ],
          "description": "The default shape of the nodes representing directives. Notice that 'ellipse','circle','database','box' and 'text' have the label inside the shape, the rest have the label outside the shape."
        },
        "angularTools.graphNodes.injectableNodeBackgroundColor": {
          "type": "string",
          "default": "#97c2fc",
          "description": "The default color of the nodes representing injected components."
        },
        "angularTools.graphNodes.injectableNodeShape": {
          "type": "string",
          "default": "box",
          "enum": [
            "ellipse",
            "circle",
            "database",
            "box",
            "text",
            "diamond",
            "dot",
            "star",
            "triangle",
            "triangleDown",
            "hexagon",
            "square"
          ],
          "description": "The default shape of the nodes representing directives. Notice that 'ellipse','circle','database','box' and 'text' have the label inside the shape, the rest have the label outside the shape."
        },
        "angularTools.graphNodes.maximumNodeLabelLength": {
          "type": "number",
          "default": "40",
          "description": "The maximum length of the label for the nodes in the hierarchy. If the class name, module definition, module imports, exports, directives or pipes are longer than the specified number of characters, it will be truncated to this length."
        },
        "angularTools.edges.importEdgeColor": {
          "type": "string",
          "default": "#43a047",
          "description": "The default color of the edges representing imports."
        },
        "angularTools.edges.exportEdgeColor": {
          "type": "string",
          "default": "#0288d1",
          "description": "The default color of the edges representing exports."
        },
        "angularTools.edges.injectableEdgeColor": {
          "type": "string",
          "default": "#0288d1",
          "description": "The default color of the edges representing injectables."
        },
        "angularTools.edges.usesEdgeColor": {
          "type": "string",
          "default": "#0288d1",
          "description": "The default color of the edges representing components using other components."
        },
        "angularTools.edges.routeEdgeColor": {
          "type": "string",
          "default": "#FF8C00",
          "description": "The default color of the edges representing routes."
        },
        "angularTools.packageJsonMarkdownFilename": {
          "type": "string",
          "default": "ReadMe-PackagesJson.md",
          "description": "The default filename used when saving the packages.json as a markdown file."
        },
        "angularTools.projectDirectoryStructureMarkdownFilename": {
          "type": "string",
          "default": "ReadMe-ProjectDirectoryStructure.md",
          "description": "The default filename used when saving the project directory structure as a markdown file."
        },
        "angularTools.componentHierarchyMarkdownFilename": {
          "type": "string",
          "default": "ComponentHierarchy.md",
          "description": "The default name used when saving the component hierarchy to a markdown file."
        },
        "angularTools.modulesToMarkdownFilename": {
          "type": "string",
          "default": "Modules.md",
          "description": "The default name used when saving the project module to a markdown file."
        },
        "angularTools.showPopupsOverNodesAndEdges": {
          "type": "boolean",
          "default": true,
          "description": "When the setting is set to true a popup with various information from node or edge will be shown when the mouse pointer hovers over nodes and edges."
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "webpack --mode production",
    "webpack": "webpack --mode development",
    "webpack-dev": "webpack --mode development --watch",
    "compile": "tsc -p ./",
    "lint": "eslint src --ext ts",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/glob": "^8.1.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "^20.1.3",
    "@types/vscode": "^1.78.0",
    "@typescript-eslint/eslint-plugin": "^5.59.5",
    "@typescript-eslint/parser": "^5.59.5",
    "eslint": "^8.40.0",
    "glob": "^10.2.3",
    "supports-color": "^9.3.1",
    "ts-loader": "^9.4.2",
    "typescript": "^5.0.4",
    "webpack": "^5.82.1",
    "webpack-cli": "^5.1.1"
  },
  "dependencies": {
    "@types/xmldom": "^0.1.31",
    "@xmldom/xmldom": "^0.8.7",
    "bluebird": "^3.7.2",
    "browserslist": "^4.21.5",
    "js-base64": "^3.7.5",
    "npm-registry-fetch": "^14.0.5",
    "prettify-xml": "^1.2.0",
    "xmlserializer": "^0.6.1"
  }
}
